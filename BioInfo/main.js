// Generated by LiveScript 1.3.1
(function(){
  var ref$, m, _, pls, TM, download, CSS, app, Storage, Worker, GenerateFileToDownload, DownloadCVS, ProgressBar1Animation, ProgressBar2Animation, ChangeValueAndAnimate, GenerateRandom10, EventsToEvent, config, FileInputCall, StartUpload, ProgressBarInit, Table, CreateBigTable, InitialTable, AppInit;
  ref$ = require("./headers.js"), m = ref$.m, _ = ref$._, pls = ref$.pls, TM = ref$.TM, download = ref$.download;
  CSS = window.CSS;
  app = {};
  Storage = {};
  Storage.OldMaximumPixelPosition1 = 0;
  Storage.OldMaximumPixelPosition2 = 0;
  Storage.MileStone = 0;
  Storage.NewText1 = "";
  Storage.OldText1 = "";
  Storage.TextWidth = 0;
  Worker = new window.Worker("Minions.js");
  GenerateFileToDownload = function(Table){
    var Final, K, i$, len$, I;
    Final = "Rank,Frequency,Sequence\n";
    K = 1;
    for (i$ = 0, len$ = Table.length; i$ < len$; ++i$) {
      I = Table[i$];
      Final += K + "," + I[0] + "," + I[1] + "\r\n";
      K += 1;
    }
    return Final;
  };
  DownloadCVS = function(){
    var Table, res$, i$, ref$, len$, I;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = _.zip(Storage.PointersToFreq, Storage.PointersToSequence)).length; i$ < len$; ++i$) {
      I = ref$[i$];
      res$.push([I[0].innerHTML, I[1].innerHTML]);
    }
    Table = res$;
    download(GenerateFileToDownload(
    Table), "Ranking.csv", "cvs");
  };
  ProgressBar1Animation = function(){
    var ctx, Height, Width, OverAllPixels, Floor, StartToDrawPosition, FasterRatio, RelativePixelToDraw;
    ctx = Storage.ctx1;
    Height = ctx.canvas.height;
    Width = ctx.canvas.width;
    OverAllPixels = Width * Storage.MileStone / 50;
    Floor = Math.floor;
    StartToDrawPosition = Storage.OldMaximumPixelPosition1;
    if (OverAllPixels >= StartToDrawPosition && StartToDrawPosition < Width) {
      FasterRatio = 1000 / Storage.ApproxiateTime;
      RelativePixelToDraw = OverAllPixels - Storage.OldMaximumPixelPosition1;
      ctx.fillRect(StartToDrawPosition, Height / 4, Floor(RelativePixelToDraw * 0.1 * FasterRatio), Height / 2);
      Storage.OldMaximumPixelPosition1 = StartToDrawPosition + Floor(RelativePixelToDraw * 0.1 * FasterRatio);
      ctx.stroke();
    }
  };
  ProgressBar2Animation = function(){
    var ctx, Height, Width, Floor, OverAllPixels, StartToDrawPosition, FasterRatio, RelativePixelToDraw;
    ctx = Storage.ctx2;
    Height = ctx.canvas.height;
    Width = ctx.canvas.width;
    Floor = Math.floor;
    OverAllPixels = Width * (Storage.MileStone - 50) / 50;
    StartToDrawPosition = Storage.OldMaximumPixelPosition2;
    if (OverAllPixels > StartToDrawPosition && StartToDrawPosition < Width) {
      FasterRatio = 1000 / Storage.ApproxiateTime;
      RelativePixelToDraw = OverAllPixels - Storage.OldMaximumPixelPosition2;
      ctx.fillRect(StartToDrawPosition, Height / 4, Floor(RelativePixelToDraw * 0.1 * FasterRatio), Height / 2);
      Storage.OldMaximumPixelPosition2 = StartToDrawPosition + Floor(RelativePixelToDraw * 0.1 * FasterRatio);
      ctx.stroke();
    }
  };
  ChangeValueAndAnimate = function(Indexes, ListOfFreqAnimation, Table){
    var Freq, Seqn, i$, len$, I, ElemFromTable;
    Freq = Storage.PointersToFreq;
    Seqn = Storage.PointersToSequence;
    for (i$ = 0, len$ = Indexes.length; i$ < len$; ++i$) {
      I = Indexes[i$];
      ElemFromTable = Table[I];
      Freq[I].innerHTML = ElemFromTable[0];
      Seqn[I].innerHTML = ElemFromTable[1];
      TM.to(Freq, 0.2, {
        opacity: 1
      });
      TM.to(Seqn, 0.2, {
        opacity: 1
      });
    }
    for (i$ = 0, len$ = ListOfFreqAnimation.length; i$ < len$; ++i$) {
      I = ListOfFreqAnimation[i$];
      ElemFromTable = Table[I];
      Freq[I].innerHTML = ElemFromTable[0];
      TM.to(Freq, 0.2, {
        opacity: 1
      });
    }
  };
  Storage.ApproxiateTime = 1000;
  Worker.onmessage = function(message){
    var Data, CurrentTime, Freq, Seqn, NumList, ListOfIndexToAnimate, ListOfFreqIndexesToAnimate, Table, i$, len$, I, CurrentFreq, CurrentSeqn, PointerToCurrrentFreqHTML, PointerToCurrrentSeqnHTML;
    Data = message.data;
    Storage.TextForMileStone.innerHTML = Data.Progress + "%";
    CurrentTime = new Date().getTime();
    Storage.ApproxiateTime = CurrentTime - Storage.OldAbsoluteTime;
    Storage.OldAbsoluteTime = CurrentTime;
    Storage.MileStone = Data.Progress;
    Freq = Storage.PointersToFreq;
    Seqn = Storage.PointersToSequence;
    NumList = _.range(0, 25);
    ListOfIndexToAnimate = [];
    ListOfFreqIndexesToAnimate = [];
    if (Data.Table) {
      Table = pls.reverse(Data.Table);
      for (i$ = 0, len$ = NumList.length; i$ < len$; ++i$) {
        I = NumList[i$];
        CurrentFreq = Table[I][0];
        CurrentSeqn = Table[I][1];
        PointerToCurrrentFreqHTML = Freq[I];
        PointerToCurrrentSeqnHTML = Seqn[I];
        if (!(PointerToCurrrentSeqnHTML.innerHTML === CurrentSeqn)) {
          ListOfIndexToAnimate.push(I);
          TM.to(PointerToCurrrentSeqnHTML, 0.2, {
            opacity: 0.6
          });
          TM.to(PointerToCurrrentFreqHTML, 0.2, {
            opacity: 0.6
          });
        } else if (!(PointerToCurrrentFreqHTML.innerHTML === CurrentFreq)) {
          ListOfFreqIndexesToAnimate.push(I);
          TM.to(PointerToCurrrentFreqHTML, 0.2, {
            opacity: 0.6
          });
        }
      }
      setTimeout(function(){
        return ChangeValueAndAnimate(ListOfIndexToAnimate, ListOfFreqIndexesToAnimate, Table);
      }, 250);
    }
  };
  GenerateRandom10 = function(){
    var From, Final, i$, I;
    From = ["G", "T", "H", "C", "A"];
    Final = "";
    for (i$ = 0; i$ <= 9; ++i$) {
      I = i$;
      Final += From[Math.floor(Math.random() * 5)];
    }
    return Final;
  };
  EventsToEvent = function(Events){
    return function(Elem){
      var i$, ref$, len$, I, results$ = [];
      for (i$ = 0, len$ = (ref$ = Events).length; i$ < len$; ++i$) {
        I = ref$[i$];
        results$.push(I(Elem));
      }
      return results$;
    };
  };
  config = function(Name){
    return function(Elem, Init){
      if (Init === false) {
        Storage[Name] = Elem;
      }
    };
  };
  FileInputCall = function(Elem){
    Storage.FileInput.click();
  };
  StartUpload = function(){
    var FileObject;
    FileObject = Storage.FileInput.files[0];
    Storage.OldAbsoluteTime = new Date().getTime();
    Worker.postMessage(FileObject);
  };
  ProgressBarInit = function(Name, NameToAssign){
    var ctx;
    ctx = Storage[Name].getContext("2d");
    ctx.fillStyle = "rgba(48,57,150,0.6)";
    ctx.font = "18px OpenSan";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    Storage[NameToAssign] = ctx;
  };
  Table = m("div", {
    style: CSS.TableTopCell
  }, [
    m("div", {
      style: CSS.Heading("20%")
    }, "Rank"), m("div", {
      style: CSS.Heading("30%")
    }, "Frequency"), m("div", {
      style: CSS.Heading("50%")
    }, "Sequence")
  ]);
  CreateBigTable = function(){
    var Frequency, Sequence, Each, i$, ref$, len$, I, results$ = [];
    Storage.PointersToFreq = [];
    Storage.PointersToSequence = [];
    Frequency = function(Elem, Init){
      if (Init === false) {
        return Storage.PointersToFreq.push(Elem);
      }
    };
    Sequence = function(Elem, Init){
      if (Init === false) {
        return Storage.PointersToSequence.push(Elem);
      }
    };
    Each = function(data, CSSArrayValue){
      var PointerToEach;
      PointerToEach = [];
      return m("div", {
        style: CSS.TableTopCell
      }, [
        m("div", {
          style: CSS.RankingString(CSSArrayValue, "20%")
        }, data), m("div", {
          style: CSS.RankingString(CSSArrayValue, "30%"),
          config: Frequency
        }, " - - "), m("div", {
          style: CSS.RankingString(CSSArrayValue, "50%"),
          config: Sequence
        }, " - - ")
      ]);
    };
    for (i$ = 0, len$ = (ref$ = _.range(1, 26, 1)).length; i$ < len$; ++i$) {
      I = ref$[i$];
      results$.push(Each(I, I));
    }
    return results$;
  };
  InitialTable = CreateBigTable();
  app.controller = function(){};
  AppInit = function(Elem, Init){
    if (Init === false) {
      ProgressBarInit("ProgressBar1", "ctx1");
      ProgressBarInit("ProgressBar2", "ctx2");
      setInterval(ProgressBar1Animation, 60);
      setInterval(ProgressBar2Animation, 60);
    }
  };
  app.view = function(ctrl){
    return m("html", [
      m("head", m("link", {
        rel: "stylesheet",
        type: "text/css",
        href: "./MyCSS.css"
      })), m("body", {
        config: AppInit
      }, m("div", {
        style: CSS.TopLevel
      }, [
        m("div", {
          style: CSS.FirstRow
        }, [
          m("div", {
            style: CSS.ProgressBar
          }, m("canvas", {
            style: CSS.ProgressBarCanvas,
            height: "70%",
            width: "350%",
            config: config("ProgressBar1")
          })), m("div", {
            style: CSS.UploadBox
          }, [
            m("div", {
              style: CSS.UploadButton,
              onmouseenter: CSS.MouseDownUploadButton,
              onmouseleave: CSS.MouseUpUploadButton(0.5),
              onclick: EventsToEvent(
              [CSS.MouseUpUploadButton(0.1), FileInputCall])
            }, "UPLOAD FILE"), m("input", {
              type: "file",
              style: CSS.InputFileCSS,
              config: config("FileInput"),
              onchange: StartUpload
            })
          ]), m("div", {
            style: CSS.ProgressBar
          }, m("canvas", {
            style: CSS.ProgressBarCanvas,
            height: "70%",
            width: "350%",
            config: config("ProgressBar2")
          }))
        ]), m("div", {
          style: CSS.RankingCSS
        }, [
          m("div", {
            style: CSS.ProgressStatus,
            config: config("TextForMileStone")
          }, ""), m("div", {
            style: CSS.TableHeading
          }, [Table, Table]), m("div", {
            style: CSS.Table
          }, InitialTable)
        ]), m("div", {
          style: CSS.FirstRow
        }, m("div", {
          style: CSS.DownloadBox,
          onmouseenter: CSS.MouseDownUploadButton,
          onmouseleave: CSS.MouseUpUploadButton(0.5),
          onclick: DownloadCVS
        }, "DOWLOAD RANKING"))
      ]))
    ]);
  };
  m.module(document, app);
}).call(this);
