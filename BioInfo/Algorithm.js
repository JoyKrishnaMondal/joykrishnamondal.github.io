// Generated by LiveScript 1.3.1
(function(){
  var _, Main, Public;
  _ = require("prelude-ls");
  Main = {};
  Main.ValueOfN = 10;
  Main.DecisionTree = {};
  Main.ListOfMostFrequent = [];
  Main.SizeOfFreqList = 25;
  Main.MinValue = 0;
  Main.I = 0;
  Main.MileStone = 0;
  Main.PreviousDived = 1;
  Main.CleanData = function(RawData){
    var Lines, i$, to$, I;
    Lines = _.tail(
    function(it){
      return it.split("\n");
    }(
    RawData));
    this.RawSnippets = [];
    for (i$ = 0, to$ = Lines.length; i$ <= to$; i$ += 4) {
      I = i$;
      if (Lines[I] !== undefined) {
        this.RawSnippets.push(Lines[I]);
      }
    }
  };
  Main.GetFrequencyTable = function(){
    return _.sortBy(function(x){
      return x[0];
    })(
    _.map(function(x){
      return [x[0].Freqency, x[1]];
    }, this.ListOfMostFrequent));
  };
  Main.RecursiveWalk = function(Leaf, Feed, Position){
    var Letter, CurrentLeaf, CurrentNum, List, SortedByAscendingOrder, GettingRidOf;
    Letter = Feed[Position];
    if (Position === this.ValueOfN - 1) {
      if (Leaf[Letter] === undefined) {
        Leaf[Letter] = {
          "Freqency": 1,
          "InTopList": false
        };
      } else {
        CurrentLeaf = Leaf[Letter];
        CurrentNum = CurrentLeaf.Freqency + 1;
        CurrentLeaf.Freqency = CurrentNum;
        List = this.ListOfMostFrequent;
        if (List.length > this.SizeOfFreqList - 1) {
          if (CurrentNum >= this.MinValue) {
            if (CurrentLeaf.InTopList === false) {
              this.ListOfMostFrequent.push([CurrentLeaf, Feed]);
              SortedByAscendingOrder = _.sortBy(function(x){
                return x[0].Freqency;
              }, this.ListOfMostFrequent);
              GettingRidOf = SortedByAscendingOrder.shift();
              GettingRidOf[0].InTopList = false;
              this.MinValue = SortedByAscendingOrder[0][0].Freqency;
              this.ListOfMostFrequent = SortedByAscendingOrder;
              CurrentLeaf.InTopList = true;
            }
          }
        } else {
          CurrentLeaf.InTopList = true;
          this.ListOfMostFrequent.push(
          [CurrentLeaf, Feed]);
          this.MinValue = _.minimum(
          _.map(function(x){
            return x[0].Freqency;
          }, this.ListOfMostFrequent));
        }
      }
    } else {
      if (Leaf[Letter] === undefined) {
        Leaf[Letter] = {};
      }
      this.RecursiveWalk(Leaf[Letter], Feed, Position + 1);
    }
  };
  Main.Progress = function(Interval){
    var PercentDone, Dived;
    Interval == null && (Interval = 2);
    PercentDone = Math.floor(
    this.I / this.RawSnippets.length * 100);
    Dived = PercentDone % Interval;
    if (Dived === 0 && this.PreviousDived === Interval - 1) {
      this.MileStone += Interval;
      Main.FnToRun();
    }
    this.PreviousDived = Dived;
  };
  Main.RunFunctionAtInterval = function(Fn){
    Main.FnToRun = Fn;
  };
  Main.EachSegmentAnalysis = function(Segment){
    var N, i$, to$, I, Feed;
    this.Progress();
    this.I += 1;
    N = this.ValueOfN;
    for (i$ = 0, to$ = Segment.length - N; i$ <= to$; ++i$) {
      I = i$;
      Feed = _.slice(I, I + N, Segment);
      this.RecursiveWalk(this.DecisionTree, Feed, 0);
    }
  };
  Main.Analyze = function(Data){
    var i$, ref$, len$, I, results$ = [];
    this.CleanData(Data);
    for (i$ = 0, len$ = (ref$ = this.RawSnippets).length; i$ < len$; ++i$) {
      I = ref$[i$];
      results$.push(this.EachSegmentAnalysis(I));
    }
    return results$;
  };
  Public = {};
  Public.GetFrequencyTable = Main.GetFrequencyTable.bind(Main);
  Public.Analyze = Main.Analyze.bind(Main);
  Public.RunFunctionAtInterval = Main.RunFunctionAtInterval.bind(Main);
  module.exports = Public;
}).call(this);
