// Generated by LiveScript 1.3.1
(function(){
  var MAXFONTSIZE, DEFAULTFONTSIZE, MAXFONTSIZEFORSIDEHEADING, ref$, TC, JQ, m, _, TM, Doc, ArrayOfCode, T, MDoc, GetRidOfNewLine, KeepOnlyString, AnchorStyle, ListOfReferences, ListOfFigRef, ListOfEquRef, ListOfHref, ListOfFigCaption, ListOfEqu, ListOfParagraph, ListOfCode, ListOfBold, ChangeBold, ChangePara, ReplaceCode, ReplaceFigCaption, CreateListOfFigCaption, ReplaceRef, EmptyTest, CreateListOfHref, SeperateByTag, FindListOfHeading, CreateNumberList, ReplaceWithNum, FontSizeBasedOnH, CreateIndexPage, Run, HeadingList, Run1, Curate, Mod, WithOnlyNames, Index, Jm, CreateSideBar, app, config, Width, triangleShape, mediaQueryList, WhenPrint;
  MAXFONTSIZE = 50;
  DEFAULTFONTSIZE = 4;
  MAXFONTSIZEFORSIDEHEADING = 30;
  ref$ = require("./headers.js"), TC = ref$.TC, JQ = ref$.JQ, m = ref$.m, _ = ref$._, TM = ref$.TM;
  JQ.ajaxSetup({
    async: false
  });
  Doc = JQ.get("test.html").responseText;
  Doc = Doc.replace(/\n|\s/g, " ");
  ArrayOfCode = ["Node.js", "node.js", "Javascript", "npm", "UNIX", "npm", "inc", "ECMAScript 6", "IO.js", "HTML5", "canvas", "Glup.js", "Grunt.js", "JSON", "API", "LiveScript", "CLI", "browserify.js", "HTTP", "static.js", "html", ".js", "SQLite3", "LowDB"];
  T = {};
  T.Doc = Doc;
  _.each(ArrayOfCode, function(x){
    T.Doc = eval("T.Doc.replace(/" + x + "/g,'<code>" + x + "</code>')");
  });
  Doc = T.Doc;
  T = null;
  MDoc = eval(TC.Template(Doc).toString());
  GetRidOfNewLine = function(Doc){
    return _.filter(Doc, function(x){
      if (x[0] === "\n") {
        return false;
      } else {
        return true;
      }
    });
  };
  KeepOnlyString = function(Doc){
    var K, len, Current, results$ = [];
    K = 0;
    len = Doc.length;
    while (K < len) {
      Current = Doc[K];
      results$.push(K += 1);
    }
    return results$;
  };
  AnchorStyle = {
    textDecoration: "none",
    color: "black"
  };
  ListOfReferences = [];
  ListOfFigRef = [];
  ListOfEquRef = [];
  ListOfHref = [];
  ListOfFigCaption = [];
  ListOfEqu = [];
  ListOfParagraph = [];
  ListOfCode = [];
  ListOfBold = [];
  ChangeBold = function(){
    var K, len, Current;
    K = 0;
    len = ListOfBold.length;
    while (K < len) {
      Current = ListOfBold[K];
      Current.children = [m("span", {
        style: {
          fontSize: "9pt"
        }
      }, Current.children[0])];
      K += 1;
    }
  };
  ChangePara = function(){
    var K, len, Current;
    K = 0;
    len = ListOfParagraph.length;
    while (K < len) {
      Current = ListOfParagraph[K];
      Current.children.unshift(m("span", "\u00a0"));
      K += 1;
    }
  };
  ReplaceCode = function(){
    var K, len, Current;
    K = 0;
    len = ListOfCode.length;
    while (K < len) {
      Current = ListOfCode[K].children[0];
      ListOfCode[K].attrs.style = {
        "font-size": "8 pt"
      };
      K += 1;
    }
  };
  ReplaceFigCaption = function(Names){
    var K, len, Current, tag, Value;
    K = 0;
    len = ListOfFigRef.length;
    while (K < len) {
      Current = ListOfFigRef[K];
      tag = Current.children[0];
      Value = _.indexOf(Names, tag);
      Current.children = [m("a", {
        href: "#Fig." + tag,
        style: {
          textDecoration: "none",
          color: "black"
        }
      }, "[ figure " + (Value + 1) + " ]")];
      K += 1;
    }
  };
  CreateListOfFigCaption = function(){
    var Names, len, K, Current, tag;
    Names = [];
    len = ListOfFigCaption.length;
    K = 0;
    while (K < len) {
      Current = ListOfFigCaption[K];
      tag = Current.attrs.tag;
      Names.push(tag);
      Current.children.unshift(m("b", "Figure " + (K + 1) + " - "));
      Current.children = [m("a", {
        name: "Fig." + tag,
        style: {
          textDecoration: "none",
          color: "black"
        }
      }, Current.children)];
      K += 1;
    }
    return Names;
  };
  ReplaceRef = function(Names){
    var K, len, Current, Value;
    K = 0;
    len = ListOfReferences.length;
    while (K < len) {
      Current = ListOfReferences[K];
      Value = _.indexOf(Names, Current.children[0]);
      Current.children[0] = m("a", {
        href: "#" + Current.children[0],
        style: {
          textDecoration: "none",
          color: "black"
        }
      }, "[" + (Value + 1) + "]");
      K += 1;
    }
  };
  EmptyTest = function(Words){
    var Fn;
    Fn = function(x){
      if (x === undefined || x === null) {
        return false;
      }
      if (/\w/.test(x) || typeof x === "object") {
        return true;
      } else {
        return false;
      }
    };
    if (Words === undefined || Words.length === 0) {
      return false;
    } else {
      return _.reduce(_.map(Words, Fn), function(x, y){
        return x + y;
      });
    }
  };
  CreateListOfHref = function(){
    var K, Names, len, Current, tag, reference, Words, Row, Inside;
    K = 0;
    Names = [];
    len = ListOfHref.length;
    while (K < len) {
      Current = ListOfHref[K];
      tag = Current.attrs.tag;
      reference = Current.attrs.href;
      Words = Current.children;
      Row = [m("div", {
        style: {
          float: "left"
        }
      }, (K + 1) + "." + "\u00a0")];
      if (tag !== undefined) {
        Row.push([m("a", {
          name: tag,
          style: {
            display: "table-cell",
            textDecoration: "none"
          }
        }, Current.children)]);
      }
      if (reference !== undefined) {
        Inside = m("a", {
          href: reference,
          style: {
            color: "#0C9502"
          }
        }, reference);
        Row.push(m("div", {
          style: {
            display: "table-row"
          }
        }, [Inside]));
      }
      Current.children = [m("p", Row)];
      Names.push(tag);
      K += 1;
    }
    return Names;
  };
  SeperateByTag = function(Elem){};
  FindListOfHeading = function*(Doc, HeadingList){
    var len, I, Current, Run, K, len2;
    len = Doc.length;
    I = 0;
    while (I < len) {
      Current = Doc[I];
      if (typeof Current === "string") {
        I += 1;
        continue;
      }
      if (Current.tag[0] === "h" && Current.tag[1] !== "1" && Current.tag.length < 3) {
        HeadingList.push([parseInt(Current.tag.slice(1)), Current]);
      } else {
        switch (Current.tag) {
        case "ref":
          ListOfReferences.push(Current);
          break;
        case "href":
          ListOfHref.push(Current);
          break;
        case "equ":
          ListOfEqu.push(Current);
          break;
        case "equref":
          ListOfEquRef.push(Current);
          break;
        case "figref":
          ListOfFigRef.push(Current);
          break;
        case "figcaption":
          ListOfFigCaption.push(Current);
          break;
        case "p":
          ListOfParagraph.push(Current);
          break;
        case "code":
          ListOfCode.push(Current);
          break;
        case "b":
          ListOfBold.push(Current);
        }
        Run = FindListOfHeading(Current.children, HeadingList);
        K = 0;
        len2 = Current.children.length;
        while (K < len2) {
          Run.next();
          K += 1;
        }
      }
      I += 1;
    }
    return HeadingList;
  };
  CreateNumberList = function*(HeadingList){
    var K, len, PreviousCurrent, List, Curate, Mod, Pos, Current, I, len2;
    K = 0;
    len = HeadingList.length;
    PreviousCurrent = 2;
    List = [0];
    Curate = [];
    Mod = [];
    Pos = 0;
    while (K < len) {
      Current = HeadingList[K][0];
      if (Current !== PreviousCurrent) {
        if (Current < PreviousCurrent) {
          I = 0;
          len2 = PreviousCurrent - Current;
          Pos -= len2;
          while (I < len2) {
            List.pop();
            I += 1;
          }
        } else {
          Pos += 1;
          List[Pos] = 0;
        }
        PreviousCurrent = Current;
      }
      List[Pos] += 1;
      Mod.push([List[Pos], Current]);
      Curate.push(List.slice(0));
      K += 1;
    }
    yield Curate;
    return Mod;
  };
  ReplaceWithNum = function(NumberList, HeadingList){
    var I, len, Anchor, Almost;
    I = 0;
    len = HeadingList.length;
    Anchor = {
      textDecoration: "none",
      color: "black",
      fontFamily: "OpenSan"
    };
    while (I < len) {
      Almost = HeadingList[I][1];
      Almost.children[0] = m("a", {
        name: "Heading" + I,
        style: Anchor
      }, m("span", NumberList[I].join(".") + " " + Almost.children[0]));
      I += 1;
    }
  };
  FontSizeBasedOnH = function(Item){
    var FontSize;
    switch (Item) {
    case 2:
      FontSize = "13pt";
      break;
    case 3:
      FontSize = "12pt";
      break;
    case 4:
      FontSize = "11pt";
      break;
    default:
      FontSize = "10pt";
    }
    return FontSize;
  };
  CreateIndexPage = function(NamesList, ModList){
    var Heading, Doc, Line, len, K, Arrow, Cur, Size, Num, FontSize, NumM, InnerText, FinalSyle, Final;
    Heading = m("center", m("div", {
      style: {
        align: "right",
        fontSize: "15pt"
      }
    }, "Table Of Content"));
    Doc = [];
    Line = m("div", {
      style: {
        borderWidth: "1px",
        borderStyle: "solid",
        borderColor: "rgba(0,0,0,0.5)",
        margin: "20px"
      }
    });
    Doc.push(Line);
    Doc.push(Heading);
    Doc.push(Line);
    len = NamesList.length;
    K = 0;
    Arrow = ".";
    while (K < len) {
      Cur = ModList[K];
      Size = Cur[1];
      Num = Cur[0];
      FontSize = FontSizeBasedOnH(Size);
      NumM = m("span", {
        style: {
          fontSize: FontSize,
          whiteSpace: "pre-wrap"
        }
      }, Num + "" + Arrow + " ");
      InnerText = m("span", NamesList[K]);
      FinalSyle = {
        style: {
          fontSize: FontSize,
          textIndent: 2 * (Size - 2) + "em",
          paddingBottom: "0.1%"
        }
      };
      Final = m("div", FinalSyle, [NumM, InnerText]);
      Doc.push(Final);
      K += 1;
    }
    return Doc;
  };
  Run = FindListOfHeading(MDoc, []);
  HeadingList = Run.next().value;
  Run1 = CreateNumberList(HeadingList);
  Curate = Run1.next().value;
  Mod = Run1.next().value;
  WithOnlyNames = _.map(HeadingList, function(x){
    return x[1].children[0];
  });
  ReplaceWithNum(Curate, HeadingList);
  ReplaceRef(CreateListOfHref());
  ReplaceFigCaption(CreateListOfFigCaption());
  ChangePara();
  ReplaceCode();
  ChangeBold();
  Index = CreateIndexPage(WithOnlyNames, Mod);
  Jm = function(tag, content, style){
    content == null && (content = {});
    style == null && (style = {});
    return m(tag, style, content);
  };
  CreateSideBar = function(NamesList, ModList){
    var Color, BorderColor, NumColor, len, K, Doc, Arrow, Width, Cur, Size, Num, FontSize, NumLet, InnerText, NumM, Margin, FinalSyle, AnchorTag, Final;
    Color = ["rgb(234,234,234)", "rgb(255,255,255)"];
    BorderColor = ["rgb(240,240,240)", "rgb(255,255,255)"];
    NumColor = "rgb(0,0,0)";
    len = NamesList.length;
    K = 0;
    Doc = [];
    Arrow = ".";
    Width = window.innerWidth;
    while (K < len) {
      Cur = ModList[K];
      Size = Cur[1];
      Num = Cur[0];
      FontSize = FontSizeBasedOnH(Size);
      NumLet = Jm("span", Num, {
        style: {
          borderColor: "rgb(200,200,200)",
          backgroundColor: NumColor,
          paddingLeft: "3px",
          color: "rgb(255,255,255)",
          borderStyle: "solid",
          borderWidth: "0.5px",
          paddingRight: "3px",
          marginRight: "3px",
          width: "100px"
        }
      });
      InnerText = Jm("span", "" + NamesList[K]);
      NumM = Jm("span", [NumLet, InnerText], {
        style: {
          display: "table-row",
          fontSize: FontSize - 2,
          whiteSpace: "pre-wrap"
        }
      });
      Margin = (Size - 2) * 0.004 * Width + 5;
      FinalSyle = {
        style: {
          fontSize: FontSize,
          marginLeft: Margin,
          width: Width * 0.2 - Margin,
          marginTop: 0.005 * Width,
          marginBottom: 0.005 * Width,
          backgroundColor: Color[K % 2],
          borderStyle: "solid",
          borderWidth: "1px",
          borderColor: BorderColor[K % 2],
          cursor: "pointer",
          textDecoration: "none"
        }
      };
      AnchorTag = {
        href: "#" + "Heading" + K,
        style: {
          textDecoration: "none",
          color: "black"
        }
      };
      Final = m("div", FinalSyle, m("a", AnchorTag, [NumM]));
      Doc.push(Final);
      K += 1;
    }
    return Doc;
  };
  app = {};
  config = function(Name){
    return function(Elem, isInit){
      if (isInit === false) {
        app[Name] = Elem;
      }
    };
  };
  app.controller = function(){
    this.SideBarHidden = true;
  };
  Width = window.innerWidth;
  app.Width = window.innerWidth;
  app.Height = window.innerHeight;
  triangleShape = {
    width: "0",
    height: "0",
    top: "45%",
    borderTop: app.Height * 0.04 + "px solid transparent",
    borderBottom: app.Height * 0.04 + "px solid transparent",
    borderLeft: app.Height * 0.04 + "px solid rgb(0,0,0)",
    opacity: 0.4,
    position: "fixed",
    zIndex: 2,
    cursor: "pointer"
  };
  app.view = function(ctrl){
    var TriangleClick, FullCSS;
    TriangleClick = function(){
      var Val, Rotation, Latex, Signal, Amount;
      Val = [0, 21];
      Rotation = [360, 180];
      Latex = [5, 25];
      Signal = ctrl.SideBarHidden;
      TM.to(app.SideBar, 0.8, {
        marginLeft: (-Val[(Signal + 1) % 2] - 0.4) + "%"
      });
      Amount = Val[Signal % 2];
      TM.to(app.LatexDoc, 0.8, {
        marginLeft: Latex[Signal % 2] + "%"
      });
      TM.to(app.InnerTriangle, 0.8, {
        rotation: Rotation[Signal % 2]
      });
      TM.to(app.InnerTriangle, 0.2, {
        opacity: 1
      });
      setTimeout(function(){
        return TM.to(app.InnerTriangle, 0.8, {
          opacity: 0.4
        });
      }, 200);
      TM.to(app.OuterTriangle, 0.8, {
        marginLeft: (Val[Signal % 2] + 0.5 * Signal) + "%"
      });
      ctrl.SideBarHidden = !ctrl.SideBarHidden;
    };
    FullCSS = {
      style: {
        height: "99.7%",
        width: "99.7%",
        position: "absolute",
        marginLeft: "0px",
        marginRight: "0px"
      }
    };
    return m("html", [
      m("head", [
        m("link", {
          rel: "stylesheet",
          type: "text/css",
          href: "./Serif/cmun-serif.css"
        }), m("link", {
          rel: "stylesheet",
          type: "text/css",
          href: "MyCss.css"
        })
      ]), m("div", FullCSS, [
        m("div", {
          style: {
            float: "left",
            height: "99.9%",
            width: "21.4%",
            position: "fixed",
            marginLeft: "-25%"
          },
          config: config("SideBar")
        }, Jm("div", CreateSideBar(WithOnlyNames, Mod), {
          style: {
            fontFamily: "OpenSan",
            backgroundColor: "rgb(255,255,255)",
            height: "99.8%",
            width: "100%",
            marginLeft: "0",
            overflow: "auto"
          }
        })), m("div", {
          style: {
            width: "90%",
            marginLeft: "5%",
            marginRight: "5%",
            textAlign: "justify",
            lineHeight: "1.5em",
            fontFamily: "Computer Modern Serif"
          },
          config: config("LatexDoc")
        }, [MDoc]), Jm("div", Jm("div", {}, {
          config: config("InnerTriangle"),
          style: triangleShape
        }), {
          config: config("OuterTriangle"),
          style: {
            marginLeft: "0cm",
            position: "absolute"
          },
          onclick: TriangleClick
        })
      ])
    ]);
  };
  m.module(document, app);
  mediaQueryList = window.matchMedia('print');
  WhenPrint = function(mql){
    if (mql.matches) {
      app.InnerTriangle.style.opacity = 0;
    } else {
      app.InnerTriangle.style.opacity = 0.4;
    }
  };
  mediaQueryList.addListener(WhenPrint);
  window.onbeforeprint = function(){
    app.InnerTriangle.style.opacity = 0;
  };
  window.onafterprint = function(){
    app.InnerTriangle.style.opacity = 0.4;
  };
}).call(this);
