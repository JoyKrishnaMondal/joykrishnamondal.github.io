// Generated by LiveScript 1.3.1
(function(){
  var ref$, m, _, TM, merge, CombineFn, app, CSS, VideoConfig, CanvasConfig, InitFn, ChooseCamera, SelectCamera, EachRow, StatusTable, InitialConditionTable, ButtonHTML;
  ref$ = require("./headers.js"), m = ref$.m, _ = ref$._, TM = ref$.TM, merge = ref$.merge;
  CombineFn = function(ListFn){
    return function(Elem){
      var I, Len, Fn;
      I = 0;
      Len = ListFn.length;
      while (I < Len) {
        Fn = ListFn[I];
        Fn(Elem);
        I += 1;
      }
    };
  };
  app = {};
  CSS = window.MyCSS;
  VideoConfig = function(Elem, isInitialited){
    if (isInitialited === false) {
      Camera.VideoElement = Elem;
    }
  };
  CanvasConfig = function(ElemName, CTX){
    var Ob;
    Ob = function(E, isInitialited){
      var Vctx;
      if (isInitialited === false) {
        Camera[ElemName] = E;
        Vctx = E.getContext("2d");
        Vctx.canvas.height = 480;
        Vctx.canvas.width = 640;
        Camera[CTX] = Vctx;
      }
    };
    return Ob;
  };
  InitFn = function(Fn){
    var Ob;
    Ob = function(E, isInitialited){
      if (isInitialited === false) {
        return Fn();
      }
    };
    return Ob;
  };
  app.SetProperty = function(name){
    return function(Elem, isInitialited){
      if (!isInitialited) {
        this[name] = Elem;
        Camera[name] = Elem;
      }
    }.bind(this);
  };
  app.TableOfInput = {};
  app.TableOfInput.Names = ["IP", "Port", "Row Look Up (pixels)", "Maximum radius of pin (pixels)", "Luminosity [0-255]", "ID From", "ID To", "X Min [0-640]", "X Max [0-640]", "Y Min [0-480]", "Y Max [0-480]", "Frames to show"];
  app.TableOfInput.Values = ["122.0.0.1", 4001, 6, 6, 190, 0, 500, 200, 300, 200, 300, 300];
  app.StopRedraw = false;
  app.controller = function(){
    var res$, i$, ref$, len$, Item, First;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = _.zip(app.TableOfInput.Values, app.TableOfInput.Names)).length; i$ < len$; ++i$) {
      Item = ref$[i$];
      res$.push([m.prop(Item[1]), m.prop(Item[0])]);
    }
    this.TableOfInput = res$;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = this.TableOfInput).length; i$ < len$; ++i$) {
      Item = ref$[i$];
      res$.push(Item[1]);
    }
    Camera.TableOfInput = res$;
    Camera.SetTableValues();
    this.NumberOfCamera = m.prop(0);
    this.SelectedCameraIndex = m.prop(0);
    this.StatusTable = {};
    this.StatusTable.Names = ["Number Of pins lost", "Number of pins being tracked", "Time (Millisecond)"];
    this.StatusTable.Values = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = [0, 0, 0]).length; i$ < len$; ++i$) {
        Item = ref$[i$];
        results$.push(m.prop(Item));
      }
      return results$;
    }());
    Camera.StatusTable = this.StatusTable.Values;
    Camera.m = m;
    First = true;
  };
  ChooseCamera = function(Elem, SelectedCameraIndex){
    var value;
    value = parseInt(Elem.target.value.slice(7));
    SelectedCameraIndex(String(value));
  };
  SelectCamera = function(NumberOfCamera, SelectedCameraIndex){
    var options, i$, I, R;
    options = [];
    if (NumberOfCamera === 0) {
      options.push(m("option", {
        selected: ""
      }, "click find camera"));
    }
    for (i$ = 1; i$ <= NumberOfCamera; ++i$) {
      I = i$;
      if (I === SelectedCameraIndex()) {
        options.push(m("option", {
          selected: ""
        }, "Camera " + I));
      } else {
        options.push(m("option", "Camera " + I));
      }
    }
    R = m("div", {
      style: CSS.CameraShell
    }, [
      m("div", {
        style: CSS.CameraName
      }, "Choose Camera"), m("select", {
        style: CSS.SelectInner,
        onchange: function(Elem){
          return ChooseCamera(Elem, SelectedCameraIndex);
        }
      }, options)
    ]);
    return R;
  };
  EachRow = function(Interior, Style){
    Style == null && (Style = {});
    return m("td", {
      style: Style
    }, Interior);
  };
  StatusTable = function(TableOfInput){
    var BodyContent, res$, i$, ref$, len$, Item, Body;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = _.zip(TableOfInput.Names, TableOfInput.Values)).length; i$ < len$; ++i$) {
      Item = ref$[i$];
      res$.push(m("tr", {
        style: CSS.TR
      }, [EachRow(Item[0], CSS.FirstRow), EachRow(Item[1](), CSS.SecondRow)]));
    }
    BodyContent = res$;
    Body = m("tbody", {
      style: {
        display: "block",
        overflow: "auto"
      }
    }, BodyContent);
    return m("table", {
      style: CSS.StatusTable
    }, Body);
  };
  app.PopulateCameraList = function(RefToCameraNumber){
    var PromisedCall;
    Camera.GetCamera();
    PromisedCall = function(){
      var NumberOfCameras;
      NumberOfCameras = Camera.ListOfCamera.length;
      RefToCameraNumber(NumberOfCameras);
      if (NumberOfCameras > 0) {
        Camera.AttachCameraToVideoElement(1);
        Camera.InitCTX(Camera.ViewCanvas, "ViewCTX");
        Camera.InitCTX(Camera.DummyCanvas, "DummyCTX");
        Camera.AttachVideoElementToViewCanvas();
      }
    };
    setTimeout(PromisedCall, 100);
  };
  app.ShowOnlyCamera = function(Value){
    Camera.ShowOnlyCamera = Value;
  };
  InitialConditionTable = function(TableOfInput){
    var ChangeFn, SecondCol, BodyContent, res$, i$, len$, Index, Item, Body;
    ChangeFn = function(Elem, E){
      var Value;
      Value = parseFloat(E.target.value);
      if (Value !== NaN) {
        Elem(Value);
        Camera.SetTableValues();
      }
    };
    SecondCol = function(Item, Index){
      return m("input", {
        style: CSS.SecondRow,
        value: Item(),
        onchange: function(E){
          return ChangeFn(Item, E);
        },
        onfocus: CSS.OnFocus,
        onblur: CSS.TableBlur
      });
    };
    res$ = [];
    for (i$ = 0, len$ = TableOfInput.length; i$ < len$; ++i$) {
      Index = i$;
      Item = TableOfInput[i$];
      res$.push(m("tr", [EachRow(Item[0](), CSS.FirstRow), SecondCol(Item[1], Index)]));
    }
    BodyContent = res$;
    Body = m("tbody", {
      style: {
        display: "block",
        overflow: "auto"
      }
    }, BodyContent);
    return m("table", Body);
  };
  ButtonHTML = function(Name, Fn){
    var InnerDivJson;
    InnerDivJson = {
      onclick: CombineFn([CSS.ClickAnimation, Fn]),
      onmouseenter: CSS.InverseColor,
      onmouseleave: CSS.BackToNormal,
      style: CSS.ButtonInner
    };
    return m("div", m("div", {
      style: CSS.ButtonOuter
    }, m("div", InnerDivJson, Name)));
  };
  app.view = function(ctrl){
    return m("html", [
      m("head", [
        m("link", {
          href: "normalize.css",
          rel: "stylesheet",
          type: "text/css"
        }), m("link", {
          href: "MyCss.css",
          rel: "stylesheet",
          type: "text/css"
        })
      ]), m("body", {
        style: {
          align: "center"
        }
      }, [
        m("video", {
          style: CSS.Video,
          config: VideoConfig,
          autoplay: ""
        }), m("canvas", {
          style: CSS.DummyCanvas,
          config: CanvasConfig("DummyCanvas", "DummyCTX")
        }), m("div", {
          style: CSS.Graph
        }, m("canvas", {
          style: CSS.ViewCanvas,
          config: CanvasConfig("ViewCanvas", "ViewCTX")
        })), m("div", {
          style: CSS.SideBar
        }, SelectCamera(ctrl.NumberOfCamera(), ctrl.SelectedCameraIndex), InitialConditionTable(ctrl.TableOfInput), StatusTable(ctrl.StatusTable), m("div", {
          style: CSS.DummyClear
        }), m("div", {
          style: CSS.FourButton
        }, [
          ButtonHTML("Find Camera", function(){
            return app.PopulateCameraList(ctrl.NumberOfCamera);
          }), ButtonHTML("Camera Feed", function(){
            return Camera.ShowOnlyCameraFeed();
          }), ButtonHTML("Feed with Pin ID", function(){
            return Camera.ShowOnlyPins();
          }), ButtonHTML("X-Y Graph", function(){
            return Camera.SetXorYorXY("XY");
          })
        ]), m("div", {
          style: CSS.FourButton
        }, [
          ButtonHTML("X-t Graph", function(){
            return Camera.SetXorYorXY("X");
          }), ButtonHTML("Y-t Graph", function(){
            return Camera.SetXorYorXY("Y");
          }), ButtonHTML("Start Tracking", function(){
            return Camera.StartTracking();
          }), ButtonHTML("Stop Tracking", function(){
            return Camera.StopTracking();
          })
        ]), m("div", {
          style: CSS.FourButton
        }, [
          ButtonHTML("Start Port Buffer"), ButtonHTML("Stop Port Buffer"), ButtonHTML("Hide Graph/Feed", function(){
            return Camera.HideEverything();
          }), ButtonHTML("View Docs")
        ]))
      ])
    ]);
  };
  window.app = app;
  m.module(document, app);
}).call(this);
