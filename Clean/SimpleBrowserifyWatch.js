// Generated by LiveScript 1.3.1
(function(){
  var browserify, fs, White, Green, LightGreen, RedLight, Red, Brown, names, Input, log, exitFn, SetWatch;
  browserify = require("browserify");
  fs = require('fs');
  White = "\x1b[0;37m";
  Green = "\x1b[1;32m";
  LightGreen = "\x1b[0;32m";
  RedLight = "\x1b[0;31m";
  Red = "\x1b[1;31m";
  Brown = "\x1b[0;33m";
  names = process.argv;
  Input = [names[2], names[3]];
  log = function(string, replace){
    if (replace === false) {
      console.log(string);
      return;
    }
    process.stdout.clearLine();
    process.stdout.cursorTo(0);
    return process.stdout.write(string);
  };
  exitFn = function(){
    fs.unlink(Input[1]);
    console.log("\n" + Green + Input[1] + Brown + " deleted" + White);
    return process.exit();
  };
  SetWatch = function(filename, CompiledName){
    var Repeats, TryCatchFn, compile, changeVal, FileProcess, Main;
    Repeats = 0;
    TryCatchFn = function(Fn){
      var err;
      try {
        return Fn();
      } catch (e$) {
        err = e$;
        return console.log(RedLight + err);
      }
    };
    compile = function(external){
      var b;
      b = browserify();
      b.require("./" + filename);
      return b.bundle(function(err, buff){
        if (err) {
          console.log(Red + err + White);
          return;
        }
        return fs.writeFile(CompiledName, buff.toString(), function(err){
          if (err) {
            throw Red + err + White;
          }
          log(Brown + "browserify|" + Green + Repeats + Brown + "|: " + Green + filename + Brown + " > " + Green + CompiledName + White);
          return Repeats++;
        });
      });
    };
    changeVal = 0;
    FileProcess = function(err, file){
      switch (true) {
      case err !== "change":
        return;
      case changeVal === 0:
        changeVal++;
        return;
      case changeVal === 1:
        --changeVal;
      }
      return TryCatchFn(compile);
    };
    Main = function(){
      TryCatchFn(compile);
      fs.watch(filename, FileProcess);
      console.log(Brown + "browserify watch for " + Green + filename + Brown + " has started .." + White);
      return process.on("SIGINT", exitFn);
    };
    return Main();
  };
  SetWatch(Input[0], Input[1]);
}).call(this);
