{
  "name": "externalize",
  "version": "0.1.1",
  "description": "Create external Browserify bundles for lazy asynchronous loading",
  "main": "index.js",
  "keywords": [
    "browserify",
    "require"
  ],
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/epeli/browserify-externalize"
  },
  "author": {
    "name": "Esa-Matti Suuronen"
  },
  "license": "MIT",
  "dependencies": {
    "module-deps": "~0.6.1",
    "concat-stream": "~0.1.1"
  },
  "devDependencies": {
    "tap": "~0.4.1",
    "browserify": "~2.11.0",
    "coffeeify": "~0.4.0"
  },
  "readme": "[![build status](https://secure.travis-ci.org/epeli/browserify-externalize.png)](http://travis-ci.org/epeli/browserify-externalize)\n\n# externalize\n\nCreate external [Browserify][] bundles for lazy asynchronous loading\n\nIntroduction to asynchronous module loading with Browserify:\n\n<http://esa-matti.suuronen.org/blog/2013/04/15/asynchronous-module-loading-with-browserify/>\n\n## Install\n\n    npm install externalize\n\n## API\n\nThe module exports a single function\n\n```\nexternalize(\n    <parent bundle or array of parent bundles>,\n    <bundle or arrays of bundles to be externalized from the parent bundles>,\n    <callback fucntion>\n);\n```\n\n## Example\n\nCreate two bundles where the second one is a subset of the parent and call\n`externalize(parent, subset, callback)` on them. It will do following:\n\n  1. Moves all modules that are used in both to the parent one\n  1. Removes those modules from the parent one that are explicitly requireable\n     in the subset one\n  1. It generally tries to do the \"right thing\"\n\nin code:\n\n```javascript\nvar fs = require(\"fs\");\nvar browserify = require(\"browserify\");\nvar externalize = require(\"externalize\");\n\n// Parent bundle with an entry point\nvar parent = browserify(\"./index.js\");\n\n// Make subset bundle from external.js by making it explicitly requireable\nvar subset = browserify().require(\"./external.js\");\n\n// Remove the subset bundle code from the parent\nexternalize(parent, subset, function(err) {\n    if (err) throw err;\n\n    // Write bundles to files after externalization\n    parent.bundle().pipe(fs.createWriteStream(\"bundle/parent.js\"));\n    subset.bundle().pipe(fs.createWriteStream(\"bundle/subset.js\"));\n});\n```\n\nindex.js:\n\n```javascript\n// require(\"./external\");\n// Would not work here because external.js is externalized to the subset bundle\n\n// Use any script loader to load the subset bundle to make the require work\n// again\njQuery.getScript(\"bundle/subset.js\", function(){\n    var value = require(\"./external\");\n    // Alerts: \"external module: external module contents\"\n    alert(\"external module: \" + value);\n});\n```\n\nexternal.js:\n\n```javascript\nmodule.exports = \"external module contents\";\n```\n\n## Script loaders\n\nYou need a script loader to load the external bundles. There is one in\n[jQuery][getscript]. If you don't use jQuery you can grab [$script.js][]\nfrom [npm][$script.js-npm] or implement your [own][modern] for modern browsers\neasily.\n\nSome others include:\n\n - [yepnope](http://yepnopejs.com/)\n - [head.js](http://headjs.com/)\n - [lab.js](http://labjs.com/)\n - [lazyload](https://github.com/rgrove/lazyload/)\n - [basket.js](http://addyosmani.github.io/basket.js/)\n\n[Browserify]: https://github.com/substack/node-browserify\n[getscript]: http://api.jquery.com/jQuery.getScript/\n[$script.js]: http://dustindiaz.com/scriptjs\n[$script.js-npm]: https://npmjs.org/package/scriptjs\n[modern]: https://gist.github.com/epeli/5384178\n\n",
  "readmeFilename": "README.md",
  "_id": "externalize@0.1.1",
  "dist": {
    "shasum": "99baf112e77aa2a2d173ca66cc898535b295cff2",
    "tarball": "http://registry.npmjs.org/externalize/-/externalize-0.1.1.tgz"
  },
  "_from": "externalize@",
  "_npmVersion": "1.2.17",
  "_npmUser": {
    "name": "epeli",
    "email": "esa-matti@suuronen.org"
  },
  "maintainers": [
    {
      "name": "epeli",
      "email": "esa-matti@suuronen.org"
    }
  ],
  "directories": {},
  "_shasum": "99baf112e77aa2a2d173ca66cc898535b295cff2",
  "_resolved": "https://registry.npmjs.org/externalize/-/externalize-0.1.1.tgz"
}
