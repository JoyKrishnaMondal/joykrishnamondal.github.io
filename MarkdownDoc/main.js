// Generated by LiveScript 1.3.1
(function(){
  var ref$, io, JQ, tempConv, _, TM, move, PI, ElementPointers, config;
  ref$ = require("./headers.js"), io = ref$.io, JQ = ref$.JQ, tempConv = ref$.tempConv, _ = ref$._, TM = ref$.TM, move = ref$.move;
  PI = 3.14;
  ElementPointers = {};
  config = function(Name){
    eval("var Ob = function(e){return ElementPointers." + Name + " =" + " e;}");
    return Ob;
  };
  JQ.get("test.html", function(doc){
    var Mdoc, app, Signals, FindHeaders, CreateHeaderM, IndexM, OnScroll, OnMouseClick, FadeInTriangle, FadeOutTriangle;
    Mdoc = eval(tempConv.Template(doc).toString());
    app = {};
    Signals = {};
    Signals.OpenIndex = false;
    FindHeaders = function(doc){
      var listofHeaders, Output, Search;
      listofHeaders = [];
      Output = {};
      Search = function(elem, dept){
        var Output, find;
        Output = {};
        if (typeof elem === "string") {
          return;
        }
        find = /h([2-9])/.exec(elem.tag);
        if (find !== null) {
          Output.name = elem.children[0];
          elem.children[0] = m("a", {
            name: Output.name
          }, Output.name);
          Output.height = find[1];
          Output.dept = dept;
          return listofHeaders.push(Output);
        } else {
          return _.map(function(x){
            return Search(x, dept + 1);
          }, elem.children);
        }
      };
      _.map(function(x){
        return Search(x, 0);
      }, doc);
      return listofHeaders;
    };
    CreateHeaderM = function(list){
      var style, nest, RunForEachKid, Recur, Fn, Stuff;
      style = {
        "text-decoration": "none",
        "color": "black"
      };
      nest = function(accum, next){
        var CurrentHeight;
        CurrentHeight = _.last(accum).height;
        if (CurrentHeight < next.height) {
          _.last(accum).kid.push(next);
        } else if (CurrentHeight >= next.height) {
          accum.push(next);
        }
        return accum;
      };
      RunForEachKid = function(x){
        return _.fold(nest, [x[0]], _.tail(x));
      };
      Recur = function(x){
        var Second, First;
        Second = function(x){
          if (x.kid.length === 0) {
            return;
          }
          x.kid = RunForEachKid(x.kid);
          return _.each(Second, x.kid);
        };
        First = RunForEachKid(x);
        _.each(Second, First);
        return First;
      };
      Fn = function(x){
        return [
          m("li", m("a", {
            style: style,
            href: "#" + x.name
          }, x.name)), m("ol", _.map(Fn, x.kid))
        ];
      };
      _.each(function(x){
        return x.kid = [];
      }, list);
      Stuff = Recur(list);
      return m("ol", _.map(Fn, Stuff));
    };
    IndexM = CreateHeaderM(FindHeaders(Mdoc));
    app.controller = function(){};
    OnScroll = function(){
      return m.redraw();
    };
    OnMouseClick = function(){
      if (Signals.OpenIndex === false) {
        TM.to(ElementPointers.triangle, 0.5, {
          left: "15%",
          rotation: 180
        });
        TM.to(ElementPointers.doc, 0.5, {
          left: "10%",
          "padding-right": "0%"
        });
        TM.to(ElementPointers.Index, 0.5, {
          left: "0%"
        });
      } else {
        TM.to(ElementPointers.triangle, 0.5, {
          left: 0,
          rotation: 360
        });
        TM.to(ElementPointers.doc, 0.5, {
          left: "0%",
          "padding-right": "10%"
        });
        TM.to(ElementPointers.Index, 0.5, {
          left: "-20%"
        });
      }
      return Signals.OpenIndex = !Signals.OpenIndex;
    };
    FadeInTriangle = function(){
      return TM.to(ElementPointers.triangle, 0.5, {
        "opacity": 0.5
      });
    };
    FadeOutTriangle = function(){
      return TM.to(ElementPointers.triangle, 0.5, {
        "opacity": 0.1
      });
    };
    app.view = function(ctrl){
      var CMUN, head, triangleCSS, triangleM, styleMain, styleTextBody, IndexCSS, Index, hello, doc, body, html;
      console.log("mithril view is being called");
      CMUN = m("link", {
        rel: "stylesheet",
        href: "Serif/cmun-serif.css"
      });
      head = m("head", [CMUN]);
      triangleCSS = {
        width: "0",
        height: "0",
        top: "45%",
        borderTop: "60px solid transparent",
        borderBottom: "60px solid transparent",
        borderLeft: "60px solid rgb(0,0,0)",
        opacity: "0.1",
        position: "fixed",
        zIndex: 100
      };
      triangleM = m("div", {
        style: triangleCSS,
        config: config("triangle"),
        onclick: OnMouseClick,
        onmouseover: FadeInTriangle,
        onmouseleave: FadeOutTriangle
      });
      styleMain = {
        "font-family": "'Computer Modern Serif'"
      };
      styleTextBody = {
        "padding-left": "10%",
        "padding-right": "10%",
        "text-align": "justify",
        "font-size": "10pt",
        "position": "absolute",
        "overflow-y": "auto"
      };
      IndexCSS = {
        "top": "0",
        "left": "-20%",
        "font-size": "16pt",
        "width": "20%",
        "height": "100%",
        "-webkit-transform": "translateZ(0)",
        "position": "fixed",
        "overflow-y": "scroll",
        "overflow-x": "auto"
      };
      Index = m("div", {
        style: IndexCSS,
        config: config("Index")
      }, IndexM);
      hello = m("div", {
        config: config("hello")
      }, "hello world");
      doc = m("div", {
        style: styleTextBody,
        config: config("doc")
      }, [Mdoc]);
      body = m("body", {
        config: config("body")
      }, [doc]);
      html = m("html", {
        style: styleMain
      }, [head, triangleM, body, Index]);
      return html;
    };
    return m.module(document, app);
  });
}).call(this);
